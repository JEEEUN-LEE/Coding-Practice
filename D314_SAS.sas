/*-----------------------------------------------------------
 SAS - IF / ELSE / DO-END 조건문 활용
-----------------------------------------------------------*/

/*
 🔹 조건문이란?
   - 데이터 조건에 따라 특정 코드만 실행하도록 제어하는 구문.
   - 데이터 전처리, 파생변수 생성, 결측값 처리 등에서 매우 중요함.
*/


/*-----------------------------------------------------------
 1️⃣ IF / THEN 기본문
-----------------------------------------------------------*/
/*
 - 특정 조건이 참(TRUE)일 때만 실행.
*/
data example;
	set sashelp.class;
	if age >= 15 then group = "Teenager";
run;


/*-----------------------------------------------------------
 2️⃣ IF / THEN / ELSE 문
-----------------------------------------------------------*/
/*
 - 여러 조건 중 하나를 선택해서 실행할 때 사용.
*/
data example2;
	set sashelp.class;
	if age < 13 then group = "Child";
	else if age < 18 then group = "Teenager";
	else group = "Adult";
run;


/*-----------------------------------------------------------
 3️⃣ DO-END 블록문
-----------------------------------------------------------*/
/*
 - 여러 문장을 하나의 조건문 안에서 실행해야 할 때 사용.
*/
data example3;
	set sashelp.class;
	if age >= 15 then do;
		group = "Teenager";
		note = "High School Age";
	end;
	else do;
		group = "Junior";
		note = "Middle School Age";
	end;
run;


/*-----------------------------------------------------------
 4️⃣ 복합 조건 설정
-----------------------------------------------------------*/
/*
 - AND, OR, IN 연산자 사용 가능.
*/
data example4;
	set sashelp.class;
	if (age >= 15 and sex = "F") then flag = 1;
	else flag = 0;

	/* IN 연산자 예시 */
	if name in ("Alfred", "Alice", "Carol") then selected = "Y";
run;


/*-----------------------------------------------------------
 5️⃣ WHERE문 vs IF문 차이
-----------------------------------------------------------*/
/*
 - WHERE문: 데이터 읽기 전에 조건을 걸어, 해당 조건에 맞는 행만 불러옴.
 - IF문: 데이터를 불러온 후 조건을 걸어 처리함.
*/
data where_example;
	set sashelp.class(where=(age >= 15));
run;

data if_example;
	set sashelp.class;
	if age >= 15;
run;
/*
 💡 결과는 같지만:
   - WHERE는 I/O 효율 ↑ (데이터 필터링 단계에서 조건 적용)
   - IF는 이후 로직에서도 조건 활용 가능
*/